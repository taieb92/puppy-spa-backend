{
	"info": {
		"_postman_id": "8cb379eb-0faf-4563-ab33-17c6c26471b2",
		"name": "Puppy Spa API Tests",
		"description": "Comprehensive test suite for Puppy Spa API",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "4400054"
	},
	"item": [
		{
			"name": "Waiting Lists",
			"item": [
				{
					"name": "Create Waiting List",
					"item": [
						{
							"name": "Test Case 1: Create valid waiting list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('id');",
											"    pm.expect(jsonData).to.have.property('date');",
											"    pm.expect(jsonData).to.have.property('createdAt');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"date\": \"2024-03-20T00:00:00Z\"\n}"
								},
								"url": "{{baseUrl}}/waiting-lists"
							},
							"response": []
						},
						{
							"name": "Test Case 2: Create duplicate waiting list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"date\": \"2024-03-20T00:00:00Z\"\n}"
								},
								"url": "{{baseUrl}}/waiting-lists"
							},
							"response": []
						},
						{
							"name": "Test Case 3: Create with invalid date format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"date\": \"invalid-date\"\n}"
								},
								"url": "{{baseUrl}}/waiting-lists"
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Waiting Lists",
					"item": [
						{
							"name": "Test Case 1: Get all waiting lists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has pagination structure\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData).to.have.property('meta');",
											"    pm.expect(jsonData.meta).to.have.property('total');",
											"    pm.expect(jsonData.meta).to.have.property('page');",
											"    pm.expect(jsonData.meta).to.have.property('limit');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/waiting-lists"
							},
							"response": []
						},
						{
							"name": "Test Case 2: Get with pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has correct pagination\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.limit).to.equal(5);",
											"    pm.expect(jsonData.data.length).to.be.at.most(5);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/waiting-lists?page=1&limit=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"waiting-lists"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test Case 3: Get by date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has correct date\", function () {",
											"    const jsonData = pm.response.json();",
											"    const responseDate = new Date(jsonData.date).toISOString().split('T')[0];",
											"    pm.expect(responseDate).to.equal('2024-03-20');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/waiting-lists/date/2024-03-20"
							},
							"response": []
						},
						{
							"name": "Test Case 4: Get by non-existent date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/waiting-lists/date/2024-01-01"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Waiting List Entries",
			"item": [
				{
					"name": "Create Entry",
					"item": [
						{
							"name": "Test Case 1: Create valid entry",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('id');",
											"    pm.expect(jsonData).to.have.property('position');",
											"    pm.expect(jsonData.ownerName).to.equal('John Doe');",
											"    pm.expect(jsonData.puppyName).to.equal('Max');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ownerName\": \"John Doe\",\n    \"puppyName\": \"Max\",\n    \"serviceRequired\": \"Bath\",\n    \"arrivalTime\": \"2024-03-20T10:00:00Z\"\n}"
								},
								"url": "{{baseUrl}}/waiting-lists/{{waitingListId}}/entries"
							},
							"response": []
						},
						{
							"name": "Test Case 2: Create entry with position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Entry created at correct position\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.position).to.equal(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ownerName\": \"Jane Doe\",\n    \"puppyName\": \"Bella\",\n    \"serviceRequired\": \"Grooming\",\n    \"arrivalTime\": \"2024-03-20T11:00:00Z\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/waiting-lists/{{waitingListId}}/entries?position=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"waiting-lists",
										"{{waitingListId}}",
										"entries"
									],
									"query": [
										{
											"key": "position",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test Case 3: Create entry with invalid position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ownerName\": \"Invalid Position\",\n    \"puppyName\": \"Test\",\n    \"serviceRequired\": \"Test\",\n    \"arrivalTime\": \"2024-03-20T12:00:00Z\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/waiting-lists/{{waitingListId}}/entries?position=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"waiting-lists",
										"{{waitingListId}}",
										"entries"
									],
									"query": [
										{
											"key": "position",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Entry",
					"item": [
						{
							"name": "Test Case 1: Update entry status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status updated correctly\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.equal('in_progress');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"in_progress\"\n}"
								},
								"url": "{{baseUrl}}/waiting-lists/{{waitingListId}}/entries/{{entryId}}/status"
							},
							"response": []
						},
						{
							"name": "Test Case 2: Update with invalid status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"invalid_status\"\n}"
								},
								"url": "{{baseUrl}}/waiting-lists/{{waitingListId}}/entries/{{entryId}}/status"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Search",
			"item": [
				{
					"name": "Test Case 1: Search by owner name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains matching entries\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    const hasMatch = jsonData.some(entry => ",
									"        entry.ownerName.toLowerCase().includes('john') ||",
									"        entry.puppyName.toLowerCase().includes('john') ||",
									"        entry.serviceRequired.toLowerCase().includes('john')",
									"    );",
									"    pm.expect(hasMatch).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/search?query=John",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "John"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Case 2: Search with empty query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is empty array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array').that.is.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/search?query=",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000"
		},
		{
			"key": "waitingListId",
			"value": ""
		},
		{
			"key": "entryId",
			"value": ""
		}
	]
}