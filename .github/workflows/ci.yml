name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow manually
  workflow_dispatch:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ['main']

env:
  IMAGE_NAME: puppy-spa-backend
  PORT: 3000

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 600

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ secrets.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 600

      - name: Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            # Stop and remove old container if it exists
            docker stop ${{ env.IMAGE_NAME }} || true
            docker rm ${{ env.IMAGE_NAME }} || true

            # Pull and run new container
            docker pull ${{ secrets.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            docker run -d \
              --name ${{ env.IMAGE_NAME }} \
              -p ${{ env.PORT }}:${{ env.PORT }} \
              -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              --restart unless-stopped \
              --health-cmd "curl -f http://localhost:${{ env.PORT }}/api/health || exit 1" \
              --health-interval 30s \
              --health-timeout 10s \
              --health-retries 3 \
              ${{ secrets.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} 